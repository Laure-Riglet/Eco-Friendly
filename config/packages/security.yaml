security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/v2/signin
            user_checker: App\Security\Api\ApiVerifiedUserChecker
            stateless: true
            json_login:
                check_path: /v2/signin
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/v2
            stateless: true
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: bo_security_login
                check_path: bo_security_login
                default_target_path: bo_home
                enable_csrf: true
            logout:
                path: bo_security_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    
    access_control:
        # ! BACK-OFFICE
        - { path: '^/back_office/connexion|deconnexion', roles: [] }
        - { path: '^/back_office/utilisateurs/(\d+)', roles: ROLE_AUTHOR }
        - { path: '^/back_office/utilisateurs|conseils', roles: ROLE_ADMIN }
        - { path: '^/back_office/categories/(\d+)/(editer|modifier|desactiver)',roles: ROLE_ADMIN}
        - {
              path: '^/back_office/connexion|deconnexion',
              roles: []
        }
        - {
              # path: '^back_office/auteurs/(\d+)/(editer|modifier|desactiver)$',
              path: '^/back_office/auteurs/(\d+)/(editer|modifier|desactiver|creer)',
              roles: ROLE_AUTHOR,
          }
        - { path: '^/back_office/articles', roles: ROLE_AUTHOR }
        - { path: '^/back_office/', roles: ROLE_AUTHOR }

        # ! API
        - { path: ^/v2/signin, roles: PUBLIC_ACCESS }
        - { path: ^/v2/advices, roles: ROLE_USER, methods: [POST] }
        - { path: ^/v2/advices/\d+, roles: ROLE_USER, methods: [PUT, DELETE] }
        - { path: ^/v2/users/\d+$, roles: ROLE_USER, methods: [GET, POST, PUT, DELETE] }

    role_hierarchy:
        ROLE_ADMIN: ['ROLE_AUTHOR','ROLE_USER']
        ROLE_AUTHOR: ['ROLE_USER']

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
